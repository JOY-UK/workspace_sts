-- 쇼핑몰 프로젝트 테이블

-- 회원 정보 테이블
CREATE TABLE shop_member(
	MEMBER_ID VARCHAR(20) PRIMARY KEY
	, MEMBER_PW VARCHAR(20) NOT NULL
	, MEMBER_NAME VARCHAR(20) NOT NULL
	, GENDER VARCHAR(10) NOT NULL -- male, female
	, MEMBER_EMAIL VARCHAR(50) NOT NULL UNIQUE
	, MEMBER_TEL VARCHAR(20) -- 010-1111-2222
	, MEMBER_ADDR VARCHAR(50) 
	, ADDR_DETAIL VARCHAR(50)
	, POST_CODE VARCHAR(10)
	, JOIN_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
	, MEMBER_ROLL VARCHAR(20) DEFAULT 'USER' -- 권한(USER, ADMIN) 
);

SELECT * 
FROM shop_member;

DROP TABLE shop_member;

COMMIT;

update shop_member
SET MEMBER_ROLL = 'ADMIN'
WHERE MEMBER_ID = '관리자';

update shop_member
SET MEMBER_PW = '1'
WHERE MEMBER_ID = 'admin';

ALTER table shop_member CHANGE MEMEBER_ROLL MEMBER_ROLL VARCHAR(20);

DELETE from shop_cart;
WHERE MEMBER_ID = 'songmin24';
 
-- 상품 카테고리 정보 테이블
CREATE TABLE item_category(
	CATE_CODE INT AUTO_INCREMENT PRIMARY KEY
	, CATE_NAME VARCHAR(50) NOT NULL UNIQUE
);

INSERT INTO item_category VALUES (1, 'IT/인터넷');
INSERT INTO item_category VALUES (2, '소설/에세이');
INSERT INTO item_category VALUES (3, '문화여행');

SELECT * FROM item_category;
COMMIT;

-- 상품정보 테이블
CREATE TABLE shop_item (
	ITEM_CODE INT AUTO_INCREMENT PRIMARY KEY
	, ITEM_NAME VARCHAR(50) NOT NULL UNIQUE
	, ITEM_PRICE INT NOT NULL
	, ITEM_STOCK INT DEFAULT 10
	, ITEM_INTRO VARCHAR(100)
	, REG_DATE DATETIME DEFAULT CURRENT_TIMESTAMP()
	, CATE_CODE INT NOT NULL REFERENCES item_category (CATE_CODE) 
);
-- ITEM_STATUS 테이블명 추가(준비중:1 판매중:2 매진:3)
ALTER TABLE shop_item ADD COLUMN ITEM_STATAUS INT DEFAULT 1;

ALTER TABLE shop_item DROP COLUMN ITEM_STATAUS;

SELECT * FROM shop_item;
 
UPDATE shop_item SET ITEM_STATAUS = 2;
COMMIT; 

DROP TABLE shop_item;

SELECT * FROM ITEM_IMAGE;
COMMIT;

DELETE 
FROM shop_item
WHERE item_code  = 4;

-- 상품의 이미지 정보를 관리하는 테이블
CREATE TABLE item_image (
	IMG_CODE INT AUTO_INCREMENT PRIMARY KEY
	, ORIGIN_FILE_NAME VARCHAR(100) NOT NULL
	, ATTACHED_FILE_NAME VARCHAR(100) NOT NULL
	, IS_MAIN VARCHAR(2) NOT NULL -- ' MAIN 일때 Y , 아닐때 N
	, ITEM_CODE INT NOT NULL REFERENCES shop_item (ITEM_CODE)
);


-- 장바구니 정보 테이블
CREATE TABLE SHOP_CART(
	CART_CODE INT AUTO_INCREMENT PRIMARY KEY
	, ITEM_CODE INT NOT NULL REFERENCES shop_item(ITEM_CODE)
	, MEMBER_ID VARCHAR(20) NOT NULL REFERENCES shop_member (MEMBER_ID)
	, CART_CNT INT NOT NULL
	, CART_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);


DELETE * FROM shop_cart;
-- 상품명, 가격, 개수, 총가격
SELECT ITEM.ITEM_NAME
	, ITEM.ITEM_PRICE
	, CART_CNT
	, ITEM_PRICE * CART_CNT
FROM SHOP_CART CART INNER JOIN SHOP_ITEM ITEM 
ON CART.ITEM_CODE = ITEM.ITEM_CODE;

-- 회원아이디가 'java'인 회원의 장바구니에 담긴 장바구니 목록을 조회
-- 장바구니코드, 대표이미지명(첨부된파일명) 상품명, 가격, 개수, 총가격

SELECT CART_CODE
	, IMAGE.ATTACHED_FILE_NAME
	, ITEM.ITEM_PRICE
	, CART_CNT
	, ITEM_PRICE * CART_CNT AS TOTAL_PRICE
FROM SHOP_CART CART INNER JOIN shop_item ITEM
ON CART.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN item_image IMAGE
ON IMAGE.ITEM_CODE = CART.ITEM_CODE
WHERE MEMEBER_ID = 'JAVA'
AND IS_MAIN = 'Y';

SELECT * FROM  VIEW cart_view;

DELETE FROM cart_view;
-- 장바구니와 관련된 모든 정보를 조회할 수 있는 VIEW 생성
CREATE OR REPLACE VIEW CART_VIEW
AS 
SELECT CART_CODE
	, CART.ITEM_CODE
	, CART.MEMBER_ID
	, CART_CNT
	, CART_DATE 
	-- 카트TABLE
	
	, ITEM_NAME
	, ITEM_PRICE
	, ITEM_INTRO
	, ITEM_PRICE * CART_CNT AS TOTAL_PRICE
	-- ITEM TABLE

	, MEMBER_NAME
	, MEMBER_TEL
	, CONCAT(POST_CODE, ' ', MEMBER_ADDR, ' ', ADDR_DETAIL) AS ADDRESS
	
	, ATTACHED_FILE_NAME
	, ORIGIN_FILE_NAME
	, IS_MAIN
	, IMG_CODE
	
	, ITEM.CATE_CODE
	, CATE_NAME 
	
FROM shop_cart CART
INNER JOIN shop_item ITEM
ON CART.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN SHOP_MEMBER MEMBER
ON MEMBER.MEMBER_ID = CART.MEMBER_ID
INNER JOIN item_image IMG
ON IMG.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN item_category CATE
ON CATE.CATE_CODE = ITEM.CATE_CODE
WHERE IS_MAIN = 'Y';

-- CONCAT (문자열 순서대로 나열)
SELECT POST_CODE
	, MEMBER_ADDR
	, ADDR_DETAIL
	, CONCAT(POST_CODE, MEMBER_ADDR, ADDR_DETAIL)
FROM shop_member;

SELECT * 
FROM shop_member;
	
SELECT * FROM ;          

DROP TABLE ITEM_IMAGE;

-- 다중등록
INSERT INTO ITEM_IMAGE (
	IMG_CODE
	, ORIGIN_FILE_NAME
	, ATTACHED_FILE_NAME
	, IS_MAIN
	, ITEM_CODE
) VALUES
	 (1, 'aa.jpg', 'aaa.jpg', 'Y', 1),
	 (2, 'bb.jpg', 'bbb.jpg', 'N', 1),
	 (3, 'cc.jpg', 'ccc.jpg', 'N', 1);

-- 다음에 들어갈 아이템 조회
-- 현재 등록 된 ITEM_CODE 중 가장 큰 값을 구한 후 + 1
SELECT IFNULL(MAX(ITEM_CODE), 0) +1 FROM shop_item;

SELECT COMM
	, IFNULL(COMM, 0)
 FROM emp;

COMMIT;

SELECT S.ITEM_CODE
	, ITEM_NAME
	, ITEM_PRICE
	, ATTACHED_FILE_NAME
	FROM shop_item S INNER JOIN item_image I
	ON S.ITEM_CODE = I.ITEM_CODE
	WHERE IS_MAIN = 'Y';
	
-- 상품 상세 정보 조회
-- ITEM_CODE, ITEM_NAME, ITEM_PRICE, ITEM_INTRO
-- ATTACHED_FILE_NAME
SELECT ITEM.ITEM_CODE
	, ITEM_NAME
	, ITEM_PRICE
	, ITEM_INTRO
	, ATTACHED_FILE_NAME
	FROM shop_item ITEM INNER JOIN item_image IMG
	ON ITEM.ITEM_CODE = IMG.ITEM_CODE
	WHERE ITEM.ITEM_CODE = 1;

SELECT * FROM cart_view;

SELECT * 
FROM cart_view;

-- 내 장바구니에 추가하려는 상품이 있는지 확인
SELECT * FROM shop_cart;

SELECT CART_CODE
   , CART_CNT
   FROM CART_VIEW
   WHERE ITEM_CODE;

SELECT total_Price
FROM cart_view;

-- 구매 정보 테이블
CREATE TABLE shop_buy (
	BUY_CODE INT AUTO_INCREMENT PRIMARY KEY
	, MEMBER_ID VARCHAR(20) NOT NULL REFERENCES shop_member (MEMBER_ID)
	, BUY_PRICE INT NOT NULL
	, BUY_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 구매 상세 정보 테이블
CREATE TABLE BUY_DETAIL (
	BUY_DETAIL_CODE INT AUTO_INCREMENT PRIMARY KEY
	, ITEM_CODE INT NOT NULL REFERENCES shop_item (ITEM_CODE)
	, BUY_CNT INT NOT NULL
	, TOTAL_PRICE INT NOT NULL
	, BUY_CODE INT NOT NULL REFERENCES SHOP_BUY(BUY_CODE)
);
	
SELECT * FROM cart_view;

SELECT * FROM BUY_DETAIL;

-- 문자열 > 날짜변경
SELECT NOW()
	,STR_TO_DATE('2024-01-01', '%Y-%m-%d')
;
-- 날짜 문자열
SELECT BUY_DATE
	, DATE_FORMAT(BUY_DATE, '%Y-%m-%d')
FROM shop_buy;

SELECT BUY_DATE
	, DATE_FORMAT(BUY_DATE, '%Y-%m-%d')
	, DATE_FORMAT(BUY_DATE, '%Y-%m-%d %h:%i:%s')
	, DATE_FORMAT(BUY_DATE, '%Y')
FROM shop_buy;

SELECT BUY_CODE
, MEMBER_ID
, BUY_PRICE
, BUY_DATE
FROM shop_buy
WHERE 1 = 1
AND BUY_CODE LIKE '%1%'
AND DATE_FORMAT(BUY_DATE, '%Y-%m-%d') >= '2024-02-01'
AND DATE_FORMAT(BUY_DATE, '%Y-%m-%d') <= '2024-02-12' 
ORDER BY BUY_DATE DESC;
	
SELECT ITEM_CODE
	, CART_CODE
	, TOTAL_PRICE
	FROM CART_VIEW
	FROM CART_CODE IN (14, 15);
	
SELECT IFNULL(MAX(BUY_CODE), 0) + 1 FROM shop_buy;

SELECT * FROM shop_buy;

SELECT * FROM buy_detail;

-- 구매 날짜 및 총 구매금액
SELECT BUY_PRICE
	, BUY_DATE
FROM shop_buy
ORDER BY BUY_DATE DESC;

-- 상품코드, 상품명, 대표이미지명, 구매수량, 구매 가격
SELECT BUY.BUY_CODE 
	, ITEM.ITEM_CODE
	, BUY_CNT
	, TOTAL_PRICE
	, ITEM_NAME
	, ATTACHED_FILE_NAME
	, BUY_DATE
	, BUY_PRICE
FROM buy_detail DETAIL INNER JOIN shop_item ITEM
ON DETAIL.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN item_image IMG
ON IMG.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN shop_buy BUY
ON BUY.BUY_CODE = DETAIL.BUY_CODE
WHERE IS_MAIN = 'Y'
AND MEMBER_ID = 'admin'
ORDER BY BUY.BUY_CODE;

-- 동일(서브쿼리)
SELECT ITEM_CODE
	, BUY_CNT
	, TOTAL_PRICE
	, (SELECT ITEM_NAME
	FROM SHOP_ITEM
	WHERE ITEM_CODE = buy_detail.ITEM_CODE) AS ITEM_NAME
	, (SELECT ATTACHED_FILE_NAME
	FROM ITEM_IMAGE
	WHERE ITEM_CODE = buy_detail.ITEM_CODE AND IS_MAIN = 'Y') AS ATTACHED_FILE_NAME
	, (SELECT BUY_DATE
	FROM shop_buy
	WHERE BUY_CODE = BUY_DETAIL.BUY_CODE) AS BUY_DATE
FROM buy_detail;

SELECT * FROM shop_buy;
SELECT * FROM shop_member;



SELECT BUY.BUY_CODE
        , ITEM.ITEM_CODE
        , BUY_CNT
        , TOTAL_PRICE
        , ITEM_NAME
        , ATTACHED_FILE_NAME
        , BUY_DATE
        , BUY_PRICE
        FROM buy_detail DETAIL INNER JOIN shop_item ITEM
        ON DETAIL.ITEM_CODE = ITEM.ITEM_CODE
        INNER JOIN item_image IMG
        ON IMG.ITEM_CODE = ITEM.ITEM_CODE
        INNER JOIN shop_buy BUY
        ON BUY.BUY_CODE = DETAIL.BUY_CODE
        WHERE IS_MAIN = 'Y'
        AND BUY.BUY_CODE = 7;
        
        
  SELECT ITEM.ITEM_CODE
	  , ITEM_NAME
	  , ITEM_STOCK
	  , ITEM_STATAUS
	  , CATE_CODE
	  , ATTACHED_FILE_NAME
	  , IS_MAIN
  FROM SHOP_ITEM ITEM INNER JOIN ITEM_IMAGE IMG
  ON ITEM.ITEM_CODE = IMG.ITEM_CODE
  WHERE item_code = '5' ;
  
  SELECT ITEM_CODE
  		, ITEM_NAME
  		, ITEM_STOCK
  		, ITEM_STATAUS
  		, IF(ITEM_STATAUS = 1, '준비중', IF(ITEM_STATAUS = 2, '판매중', '매진')) AS '상태1'
  		, CASE
			WHEN ITEM_STATAUS = 1 THEN '준비중'
  			WHEN ITEM_STATAUS = 2 THEN '판매중'
  			ELSE '매진'
			END AS '상태2'
		FROM shop_item;
		
		
		
		SELECT ITEM_CODE, '안녕'  AS SSS FROM shop_item;


SELECT CATE_NAME
	, CATE.CATE_CODE -- CATEGORY 테이블 PK
	, ITEM_NAME
	, ITEM_STOCK
	, ITEM_STATAUS
	, ITEM.ITEM_CODE -- item 테이블 PK
	, ORIGIN_FILE_NAME
	, ATTACHED_FILE_NAME
	, IMG_CODE -- image 테이블 PK 각 테이블 pk값은 기본적으로 조회하자.
FROM shop_item ITEM INNER JOIN item_category CATE
ON ITEM.CATE_CODE = CATE.CATE_CODE
INNER JOIN item_image IMG
ON ITEM.ITEM_CODE = IMG.ITEM_CODE
WHERE ITEM.ITEM_CODE = 5;